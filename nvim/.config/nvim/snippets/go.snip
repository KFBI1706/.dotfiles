
snippet     check
abbr        func check(e err) { ... }
options     head
  func check(e error) {
     if e != nil {
         panic(e)
     }
  }

snippet     atoi
abbr        i, _ := strconv.Atoi("...")
options     head
  i, ${1:_} := strconv.Atoi(${0})

snippet     itoa
abbr        s := strconv.Itoa(...)
options     head
  ${1:s} := strconv.Itoa(${0})


snippet     print
abbr        fmt.Println("...")
options     head
  fmt.Println(${0})

snippet     readlines
abbr        ioutil.ReadFile ... strings.Split(...)
options     head

  dat, err := ioutil.ReadFile("${0:FILE}")
  check(err)
  for _, line := range strings.Split(string(dat), "\n") {
      //break condition
  }

snippet     qq
abbr        Pretty print to /tmp/q
options     head

  q.Q(${0}) //DEBUG

snippet     case
options     head
  case ${1:#:condition}:
    ${2:TARGET}

snippet     for
options     head
  for ${1} {
    ${0:TARGET}
  }

snippet     func
abbr        func ...() { ... }
alias fn
options     head
  func ${1:fname}(${2}) ${3:int }{
    ${0:TARGET:return }
  }

snippet     funcTest
abbr        func Test...(t *testing.T) { ... }
options     head
  func Test${1}(t *testing.T) {
    tests := map[string]struct{
      ${2:TARGET}
    }{
      "${3:TARGET:test case description}": {
        ${4:TARGET}
      },
    }

    for name, test := range tests {
      t.Run(name, func(t *testing.T) {
        ${5:TARGET}
      })
    }
  }

snippet     funcbench
abbr        func Bench... (b *testing.B) { ... }
options     head
  func Bench${1} (${2:b *testing.B}) {
    for i := 0; i < ${3:b.N}; i++ {
      ${4}
    }
  }

snippet     if
options     head
    if ${1:#:condition} {
      ${0:TARGET}
    }

snippet     iferr
alias       ifer
options     head
    if err != nil {
      ${1}
    }
    ${2}

snippet     interface
alias ti
options     head
  type ${1} interface {
    ${0:TARGET}
  }

snippet     import
alias im
options     head
  import (
    "${1:fmt}"
  )
  ${0:TARGET}

snippet     package
alias pk
options     head
  package ${1:main}
  ${0:TARGET}

snippet     printf
alias pf
options     head
  fmt.Printf("${1}\n"${2:})

snippet     println
alias       pl
options     head
  fmt.Println(${0:TARGET})

snippet     range
abbr        for range
options     head
  for ${1:v} := range ${2:#:iterator} {
    ${0:TARGET}
  }

snippet     struct
alias ts
options     head
  type ${1} struct {
    ${0:TARGET}
  }

snippet     switch
abbr        switch {}
options     head
  switch ${1:#:v} {
  case ${2:#:condition}:
    ${0:TARGET}
  }

snippet     select
abbr        select {}
options     head
  select {
  case ${1:#:condition}:
    ${0:TARGET}
  }
